# -*- coding: utf-8 -*-
"""CNN_Elec378FinalProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gaScSsRDkA9x04aPcEke5QunCBiFrjpt
"""

import librosa
import numpy as np
import csv
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.model_selection import StratifiedKFold

from google.colab import drive
drive.mount('/content/drive')

"""**Loading Kaggle Data**"""

def extract_features(file_name, duration=10):
    try:
        # Load audio file
        audio_timeseries, sampling_rate = librosa.load(file_name, sr=None, duration=duration)

        # Extract MFCC features
        mfccs = librosa.feature.mfcc(y=audio_timeseries, sr=sampling_rate, n_mfcc=20)
        # # Calculate deltas (first and second order)
        # mfcc_delta = librosa.feature.delta(mfccs)
        # mfcc_delta2 = librosa.feature.delta(mfccs, order=2)

        # Other audio features
        chroma = librosa.feature.chroma_stft(y=audio_timeseries, sr=sampling_rate)
        contrast = librosa.feature.spectral_contrast(y=audio_timeseries, sr=sampling_rate)
        tonnetz = librosa.feature.tonnetz(y=audio_timeseries, sr=sampling_rate)

        # # Stack all features into one array
        # #all_features = np.vstack([mfccs, mfcc_delta, mfcc_delta2, chroma, contrast, tonnetz])
        # all_features = np.vstack([mfccs, mfcc_delta, mfcc_delta2])
        all_features = np.vstack([mfccs,chroma,contrast,tonnetz])

        # Average over time to convert the array shape from (n_features, time) to (n_features,)
        features_mean = np.mean(all_features, axis=1)

        #mfccs_mean = np.mean(mfccs, axis=1)

        return features_mean
    except Exception as e:
        print(f"Error loading {file_name}: {e}")
        return None

# Load labels from CSV
labels = []
with open('/content/drive/My Drive/Elec378 Final Project/Dataset/train.csv', mode='r', newline='', encoding='utf-8') as file:
    reader = csv.reader(file)
    next(reader)  # Skip the header
    for row in reader:
        labels.append(row[1])

# Load dataset and extract features
features = []
labels_for_features = []

for i in range(0, len(labels)):
    file_name = f'/content/drive/My Drive/Elec378 Final Project/Dataset/train/train{str(i).zfill(3)}.wav'
    mfccs = extract_features(file_name)
    if mfccs is not None:
        features.append(mfccs)
        labels_for_features.append(labels[i])

# Convert features and labels to numpy arrays
features = np.array(features)
labels_for_features = np.array(labels_for_features)

# Encode the labels
label_encoder = LabelEncoder()
labels_encoded = label_encoder.fit_transform(labels_for_features)

# Initialize cross-validation
kf = StratifiedKFold(n_splits=5, random_state=42, shuffle=True)
accuracies = []

# Scaler and model configuration
scaler = StandardScaler()  # Initialize the scaler

# Perform cross-validation
for train_index, test_index in kf.split(features, labels_encoded):
    X_train, X_test = features[train_index], features[test_index]
    y_train, y_test = labels_encoded[train_index], labels_encoded[test_index]

    # Normalize the features
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    # Reshape data for CNN input
    num_features = X_train_scaled.shape[1]  # Dynamically determine the number of features
    X_train_scaled = X_train_scaled.reshape(X_train_scaled.shape[0], 1, num_features, 1)
    X_test_scaled = X_test_scaled.reshape(X_test_scaled.shape[0], 1, num_features, 1)

    # Convert integer labels to one-hot encoding
    y_train_one_hot = to_categorical(y_train)
    y_test_one_hot = to_categorical(y_test)

    # Build the CNN model (adjusted to use dynamic number of classes from one-hot encoded labels)
    num_classes = y_train_one_hot.shape[1]
    model = Sequential([
        Conv2D(32, kernel_size=(1, 3), activation='relu', input_shape=(1, num_features, 1)),
        MaxPooling2D(pool_size=(1, 2)),
        Conv2D(64, (1, 3), activation='relu'),
        MaxPooling2D(pool_size=(1, 2)),
        Flatten(),
        Dense(100, activation='relu'),
        Dropout(0.5),
        Dense(num_classes, activation='softmax')  # Use the correct number of classes
    ])

    # Compile the model
    model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=['accuracy'])

    # Fit data to model
    history = model.fit(X_train_scaled, y_train_one_hot, validation_data=(X_test_scaled, y_test_one_hot), epochs=50, batch_size=32,
                        callbacks=[EarlyStopping(patience=5, restore_best_weights=True)])

    # Evaluate the model
    _, accuracy = model.evaluate(X_test_scaled, y_test_one_hot, verbose=0)
    accuracies.append(accuracy)

# Average accuracy across all folds
average_accuracy = np.mean(accuracies)
print(f"Average Accuracy: {average_accuracy * 100:.2f}%")

"""Actual Test Data"""

# Load test audio files and extract MFCC features
test_features = []
for i in range(0, 200):  # Adjust the range according to the number of your test files
    file_name = f'/content/drive/My Drive/Elec378 Final Project/Dataset/test/test{str(i).zfill(3)}.wav'
    mfccs = extract_features(file_name)
    if mfccs is not None:
        test_features.append(mfccs)

# Convert features to numpy array
test_features = np.array(test_features)

# Normalize features using the existing scaler
test_features_scaled = scaler.transform(test_features)

# Reshape features for the model, if necessary
# Here we need to ensure the shape matches what the model expects. If the model expects a certain shape, adjust below:
test_features_scaled = test_features_scaled.reshape(test_features_scaled.shape[0], 1, test_features_scaled.shape[1], 1)

# Predict using the trained model
predictions = model.predict(test_features_scaled)
predicted_classes = np.argmax(predictions, axis=1)

# Convert numerical predictions back to original labels
predicted_labels = label_encoder.inverse_transform(predicted_classes)

# Prepare a list of test file names
test_file_names = [f'test{str(i).zfill(3)}.wav' for i in range(200)]  # Adjust based on your actual test files

# Output predictions with file names to a CSV
with open('cnn.csv', 'w', newline='', encoding='utf-8') as f:
    writer = csv.writer(f)
    writer.writerow(['ID', 'Predicted_Label'])  # Writing the header
    for file_name, prediction in zip(test_file_names, predicted_labels):
        writer.writerow([file_name, prediction])
